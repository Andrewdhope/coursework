library(swirl)
swirl()
help.start()
5+7
x <- 5+ 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?C
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
getwd()
dir()
?list.files
args(list.files)
old.dir = getwd()
old.dir <- getwd()
dir.create("testdir)"
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
play()
file.info("mytest.T")$ctime
file.info("mytest.R")$ctime
file.info("mytest.R")[[ctime]]
nxt()
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"), TRUE, TRUE)
getwd()
setwd(old.dir)
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
ft
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Andrew")
my_name
paste(my_name, collapse = ""()
paste(my_name, collapse = "")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
library(swirl)
swirl()
swirl()
str(flags)
dim(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$langmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flas$population, flags$landmass, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
data("iris")
iris
iris
tapply(iris$Sepal.Length, iris$Species, mean)
?apply
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
a <- mean(mtcars$mpg, mtcars$cyl)
a <- apply(mtcars, 2, mean)
a
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
82.63636 - 209.21429
debug(ls)
ls
ls()
quit
setwd("~/coursework/assignments")
mkdir("3")
source('~/coursework/assignments/3/InverseCache.R')
source('~/coursework/assignments/3/InverseCache.R')
source('~/coursework/assignments/3/InverseCache.R')
x <- matrix()
x
matrix(2, 2)
matrix(2, 2, 2)
matrix(1, 2, 2)
matrix(1, 3, 2, 2)
matrix(1, 3, 2)
matrix(c(1, 3), 3, 2)
matrix(c(1, 3), 2)
matrix(1, c(1, 3), 2)
?marix
?matrix
matrix(c(1, 3), 2, 3)
matrix(c(1, 3), 2, 2)
matrix(c(1, 3), 2, 4)
matrix(c(1, 3, 2), 2, 4)
matrix(c(1, 3, 2), 3, 4)
matrix(c(1, 3, 2, 2), 2, 2)
x <- matrix(c(1, 3, 2, 2), 2, 2)
mat <- makeCacheMatrix(x)
mat
cacheSolve(x)
cacheSolve(mat)
makeCaceMatrix(x*1)
makeCacheMatrix(x*3)
cacheSolve(mat)
x <- matrix(c(1, 3, 2, 9), 2, 2)
makeCacheMatrix(x)
cacheSolve(mat)
x
mat
x$set(x)
x
mat$set(x)
cacheSolve(mat)
mat
source('~/coursework/assignments/3/InverseCache.R')
mat
mat <- makeCacheMatrix(x)
mat
mat$get
mat
source('~/coursework/assignments/3/InverseCache.R')
mat <- makeCacheMatrix(x)
mat
mat$x
mat$mat
mat <- makeCacheMatrix(x)
x
mat
mat$mat
source('~/coursework/assignments/3/InverseCache.R')
mat <- makeCacheMatrix(x)
x
mat
mat$x
source('~/coursework/assignments/3/InverseCache.R')
cacheSolve(matrix)
cacheSolve(mat)
mat$getinv
source('~/coursework/assignments/3/InverseCache.R')
mat <- makeCacheMatrix(x)
mat$get()
mat$getinv()
cacheSolve(matrix)
cacheSolve(mat)
mat$getinv()
x
x <- x*2
x
x <- x*x
x
mat$getinv()
mat <- makeCacheMatrix(x)
mat$getinv()
cacheSolve(mat)
cacheSolve(mat)
source('~/coursework/assignments/3/InverseCache.R')
mat$get()
x <- x-200
mat$get()
x
x <- x+200
x <- x+20
x
x <- x+40
x
mat$get()
cacheSolve(mat)
mat$set(x)
mat
mat$get()
mat$getinv
mat$getinv()
cacheSolve(matrix)
cacheSolve(mat)
cacheSolve(mat)
source('~/coursework/assignments/3/InverseCache.R')
ls(environment(mat)
ls(environment(mat))
ls(environment(mat$set))
